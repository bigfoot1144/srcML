<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="CTAD/example5.cpp">

<!--test 1-->
<unit language="C++">
<expr_stmt><expr><name><name>std</name><operator>::</operator><specifier>template</specifier><name/></name><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator> struct <macro><name>A</name></macro> <block>{ <expr><call><name>A</name><argument_list>(<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>; }</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>y</name> <init>= <expr><operator>new</operator> <call><name>A</name><argument_list>{<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>}</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// allocated type is A&lt;int&gt;</comment>
</unit>

<!--test 2-->
<unit language="C++">
<decl_stmt><decl><type><name>auto</name></type> <name>lck</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>lock_guard</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy_n</name></name><argument_list>(<argument><expr><name>vi1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
<argument><expr><call><name><name>std</name><operator>::</operator><name>back_insert_iterator</name></name><argument_list>(<argument><expr><name>vi2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<!--test 3-->
<unit language="C++">
<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>for_each</name></name><argument_list>(<argument><expr><call><name><name>vi</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vi</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><call><name>Foo</name><argument_list>(<argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content><expr><operator>...</operator></expr></block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>

<!--test 4-->
<unit language="C++">
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name></name></type> <name>p</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4.5</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>tuple</name></name></type> <name>t</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2.5</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>less</name></name></type> <name>l</name></decl>;</decl_stmt>
</unit>

<!--test 5-->
<unit language="C++">
<struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
struct <name>X</name> <block>{<public type="default">
    <constructor><name>X</name><parameter_list>(<parameter><decl><type><name>T</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></constructor>
    <function_decl type="operator"><type><name>auto</name></type> <name>operator<name>&lt;=&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier> = <specifier>default</specifier>;</function_decl>
</public>}</block>;</struct>
</unit>

<!--test 6-->
<unit language="C++">
<struct><template>template<parameter_list>&lt;<parameter><type><name>X</name></type> <name>x</name></parameter>&gt;</parameter_list></template> struct <name>Y</name> <block>{<public type="default"> </public>}</block>;</struct>
</unit>

<!--test 7-->
<unit language="C++">
<decl_stmt><decl><type><name><name>Y</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name></type> <name>y</name></decl>;</decl_stmt>
</unit>

</unit>
