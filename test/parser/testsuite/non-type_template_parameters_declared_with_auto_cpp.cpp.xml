<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="Non-typeTemplateParamsAutoDeclared/example5.cpp">

<!--test 1-->
<unit language="C++">
<struct><template>template<parameter_list>&lt;<parameter><type><name>auto</name></type><parameter><type><modifier>...</modifier></type></parameter></parameter>&gt;</parameter_list></template> struct <name>C</name> <block>{<public type="default"/>}</block>;</struct>
<decl_stmt><decl><type><name><name>C</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2L</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>&gt;</argument_list></name></type> <name>x</name></decl>;</decl_stmt>
</unit>

<!--test 2-->
<unit language="C++">
<function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>I</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>f</name><parameter_list>()</parameter_list>;</function_decl> 
<function><type><name>void</name></type> <name>g</name><parameter_list>()</parameter_list> 
<block>{<block_content>
    <expr_stmt><expr><call><name><name>f</name><argument_list type="generic">&lt;<argument><expr><name>int</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>

<!--test 3-->
<unit language="C++">
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> class <name>A</name> <block>{<private type="default"/>}</block>;</class>
<class><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name> <init>= <expr><name>T</name></expr></init></parameter>&gt;</parameter_list></template> class <name>B</name> <block>{<private type="default"/>}</block>;</class>
<class><template>template <parameter_list>&lt;<parameter><type><name>class</name> <modifier>...</modifier></type><name>Types</name></parameter>&gt;</parameter_list></template> class <name>C</name> <block>{<private type="default"/>}</block>;</class>
 
<class><template>template<parameter_list>&lt;<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>class</name></type></parameter>&gt;</parameter_list></template> <name>class</name></type> <name>P</name></parameter>&gt;</parameter_list></template> class <name>X</name> <block>{<private type="default"> </private>}</block>;</class>
<decl_stmt><decl><type><name><name>X</name><argument_list type="generic">&lt;<argument><expr><name>B</name></expr></argument>&gt;</argument_list></name></type> <name>xb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>X</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></type> <name>xc</name></decl>;</decl_stmt>
</unit>

<!--test 4-->
<unit language="C++"> 
<class><template>template<parameter_list>&lt;<parameter><type><name>auto</name></type> <name>n</name></parameter>&gt;</parameter_list></template> class <name>D</name> <block>{<private type="default">  </private>}</block>;</class>
<class><template>template<parameter_list>&lt;<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>int</name></type></parameter>&gt;</parameter_list></template> <name>class</name></type> <name>R</name></parameter>&gt;</parameter_list></template> class <name>Z</name> <block>{<private type="default"/>}</block>;</class>
<decl_stmt><decl><type><name><name>Z</name><argument_list type="generic">&lt;<argument><expr><name>D</name></expr></argument>&gt;</argument_list></name></type> <name>zd</name></decl>;</decl_stmt> 
 
<struct><template>template <parameter_list>&lt;<parameter><type><name>int</name></type></parameter>&gt;</parameter_list></template> struct <name>SI</name> <block>{<public type="default"/>}</block>;</struct>
<function_decl><template>template <parameter_list>&lt;<parameter><type><template>template <parameter_list>&lt;<parameter><type><name>auto</name></type></parameter>&gt;</parameter_list></template> <name>class</name></type></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>FA</name><parameter_list>()</parameter_list>;</function_decl>
</unit>

</unit>
